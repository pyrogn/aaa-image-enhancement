[project]
name = "aaa-image-enhancement"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Pavel", email = "60060559+pyrogn@users.noreply.github.com" }
]
dependencies = [
    "numpy>=1.26.4",
    "scikit-image>=0.23.1",
    "opencv-contrib-python>=4.9.0.80",
    "matplotlib>=3.8.4",
    "requests>=2.31.0",
    "image-dehazer>=0.0.9",
    "flask>=3.0.3",
    "pydantic>=2.7.0",
    "fastapi>=0.110.2",
    "uvicorn[standard]>=0.29.0",
    "python-multipart>=0.0.9",
    "httpx>=0.27.0",
    "opencv-python>=4.9.0.80",
]
readme = "README.md"
requires-python = ">= 3.12"

[project.optional-dependencies]
lint = [
    "ruff>=0.4.1",
]
code = [
    "pre-commit>=3.7.0",
    "tqdm>=4.66.2",
    "pip>=24.0",
    "ipykernel>=6.29.4",
    "imagehash>=4.3.1",
    "ipywidgets>=8.1.2",
]
test = [
    "pytest>=8.1.1",
    "pytest-asyncio>=0.23.6",
]
extra = [
    "beautifulsoup4>=4.12.3",
]
type = [
    "mypy>=1.9.0",
]
ml = [
    "torch>=2.2.2",
    "torchvision>=0.17.2",
    "scikit-image>=0.23.2",
    "matplotlib>=3.8.4",
    "scikit-learn>=1.4.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye.scripts]
lint = { chain = ["lint:ruff", "format:ruff" ] }
"lint:ruff" = "ruff check --fix"
"format:ruff" = "ruff format"

[tool.rye]
managed = true
dev-dependencies = []

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/aaa_image_enhancement"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "src/aaa_image_enhancement/exposure_enhancement.py"
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "UP"]
# as in https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
    "W191", # tab-indentation
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment
    "E117", # over-indented
    "D206", # indent-with-spaces
    "D300", # triple-single-quotes
    "Q000", # bad-quotes-inline-string
    "Q001", # bad-quotes-multiline-string
    "Q002", # bad-quotes-docstring
    "Q003", # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
exclude = [
    ".venv",
    "src/aaa_image_enhancement/exposure_enhancement.py",
]
